//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1.WfpNetService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WfpNetService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        ConsoleApplication1.WfpNetService.CompositeType GetDataUsingDataContract(ConsoleApplication1.WfpNetService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ConsoleApplication1.WfpNetService.CompositeType> GetDataUsingDataContractAsync(ConsoleApplication1.WfpNetService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectSQL", ReplyAction="http://tempuri.org/IService/SelectSQLResponse")]
        System.Data.DataSet SelectSQL(string strSQL, string strPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectSQL", ReplyAction="http://tempuri.org/IService/SelectSQLResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectSQLAsync(string strSQL, string strPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Disp_Trans", ReplyAction="http://tempuri.org/IService/Disp_TransResponse")]
        System.Data.DataSet Disp_Trans(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Disp_Trans", ReplyAction="http://tempuri.org/IService/Disp_TransResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> Disp_TransAsync(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNetLogistikDocuments", ReplyAction="http://tempuri.org/IService/GetNetLogistikDocumentsResponse")]
        System.Data.DataSet GetNetLogistikDocuments(string UserName, string Password, string strIDs, string strType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNetLogistikDocuments", ReplyAction="http://tempuri.org/IService/GetNetLogistikDocumentsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetNetLogistikDocumentsAsync(string UserName, string Password, string strIDs, string strType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckUser", ReplyAction="http://tempuri.org/IService/CheckUserResponse")]
        int CheckUser(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckUser", ReplyAction="http://tempuri.org/IService/CheckUserResponse")]
        System.Threading.Tasks.Task<int> CheckUserAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/test10", ReplyAction="http://tempuri.org/IService/test10Response")]
        void test10();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/test10", ReplyAction="http://tempuri.org/IService/test10Response")]
        System.Threading.Tasks.Task test10Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/test11", ReplyAction="http://tempuri.org/IService/test11Response")]
        void test11();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/test11", ReplyAction="http://tempuri.org/IService/test11Response")]
        System.Threading.Tasks.Task test11Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDate", ReplyAction="http://tempuri.org/IService/GetDateResponse")]
        string GetDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDate", ReplyAction="http://tempuri.org/IService/GetDateResponse")]
        System.Threading.Tasks.Task<string> GetDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAuftrag", ReplyAction="http://tempuri.org/IService/GetAuftragResponse")]
        System.Data.DataSet GetAuftrag(string UserName, string Password, string version, string Auftrag, string p1, string p2, string p3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAuftrag", ReplyAction="http://tempuri.org/IService/GetAuftragResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAuftragAsync(string UserName, string Password, string version, string Auftrag, string p1, string p2, string p3);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/PutSW", ReplyAction="http://tempuri.org/IService/PutSWResponse")]
        System.Data.DataSet PutSW(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/PutSW", ReplyAction="http://tempuri.org/IService/PutSWResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> PutSWAsync(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Tabellen", ReplyAction="http://tempuri.org/IService/TabellenResponse")]
        System.Data.DataSet Tabellen(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Tabellen", ReplyAction="http://tempuri.org/IService/TabellenResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> TabellenAsync(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Transport", ReplyAction="http://tempuri.org/IService/TransportResponse")]
        System.Data.DataSet Transport(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Transport", ReplyAction="http://tempuri.org/IService/TransportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> TransportAsync(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListenPool", ReplyAction="http://tempuri.org/IService/ListenPoolResponse")]
        System.Data.DataSet ListenPool(string UserName, string Password, string WebFirma, string Version, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ListenPool", ReplyAction="http://tempuri.org/IService/ListenPoolResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> ListenPoolAsync(string UserName, string Password, string WebFirma, string Version, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Poltererfassung", ReplyAction="http://tempuri.org/IService/PoltererfassungResponse")]
        System.Data.DataSet Poltererfassung(System.Data.DataSet dsService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Poltererfassung", ReplyAction="http://tempuri.org/IService/PoltererfassungResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> PoltererfassungAsync(System.Data.DataSet dsService);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckVersion", ReplyAction="http://tempuri.org/IService/CheckVersionResponse")]
        System.Data.DataSet CheckVersion(string Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckVersion", ReplyAction="http://tempuri.org/IService/CheckVersionResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> CheckVersionAsync(string Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateFertigmeldung", ReplyAction="http://tempuri.org/IService/CreateFertigmeldungResponse")]
        string CreateFertigmeldung(string UserName, string WebFirma, string Password, string xmlFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateFertigmeldung", ReplyAction="http://tempuri.org/IService/CreateFertigmeldungResponse")]
        System.Threading.Tasks.Task<string> CreateFertigmeldungAsync(string UserName, string WebFirma, string Password, string xmlFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemovePolterFromFertigmeldung", ReplyAction="http://tempuri.org/IService/RemovePolterFromFertigmeldungResponse")]
        string RemovePolterFromFertigmeldung(string UserName, string WebFirma, string Password, string arrPIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RemovePolterFromFertigmeldung", ReplyAction="http://tempuri.org/IService/RemovePolterFromFertigmeldungResponse")]
        System.Threading.Tasks.Task<string> RemovePolterFromFertigmeldungAsync(string UserName, string WebFirma, string Password, string arrPIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeletePolters", ReplyAction="http://tempuri.org/IService/DeletePoltersResponse")]
        string DeletePolters(string UserName, string WebFirma, string Password, string arrPIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeletePolters", ReplyAction="http://tempuri.org/IService/DeletePoltersResponse")]
        System.Threading.Tasks.Task<string> DeletePoltersAsync(string UserName, string WebFirma, string Password, string arrPIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SWNet", ReplyAction="http://tempuri.org/IService/SWNetResponse")]
        System.Data.DataSet SWNet(string UserName, string Password, string version, string WebFirma, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SWNet", ReplyAction="http://tempuri.org/IService/SWNetResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SWNetAsync(string UserName, string Password, string version, string WebFirma, System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WfpNetTransport", ReplyAction="http://tempuri.org/IService/WfpNetTransportResponse")]
        System.Data.DataSet WfpNetTransport(string UserName, string Password, System.Data.DataSet dsImport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WfpNetTransport", ReplyAction="http://tempuri.org/IService/WfpNetTransportResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> WfpNetTransportAsync(string UserName, string Password, System.Data.DataSet dsImport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WASP_Poltererfassung", ReplyAction="http://tempuri.org/IService/WASP_PoltererfassungResponse")]
        System.Data.DataSet WASP_Poltererfassung(string ds_String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/WASP_Poltererfassung", ReplyAction="http://tempuri.org/IService/WASP_PoltererfassungResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> WASP_PoltererfassungAsync(string ds_String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPolterFromNetlogistik", ReplyAction="http://tempuri.org/IService/GetPolterFromNetlogistikResponse")]
        string GetPolterFromNetlogistik(string GUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPolterFromNetlogistik", ReplyAction="http://tempuri.org/IService/GetPolterFromNetlogistikResponse")]
        System.Threading.Tasks.Task<string> GetPolterFromNetlogistikAsync(string GUID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFertigmeldung", ReplyAction="http://tempuri.org/IService/GetFertigmeldungResponse")]
        string GetFertigmeldung(string UserName, string WebFirma, string Password, int Tage, string Filter_LiName, string DsUpload);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFertigmeldung", ReplyAction="http://tempuri.org/IService/GetFertigmeldungResponse")]
        System.Threading.Tasks.Task<string> GetFertigmeldungAsync(string UserName, string WebFirma, string Password, int Tage, string Filter_LiName, string DsUpload);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStammAdr", ReplyAction="http://tempuri.org/IService/GetStammAdrResponse")]
        System.Data.DataSet GetStammAdr(string UserName, string WebFirma, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStammAdr", ReplyAction="http://tempuri.org/IService/GetStammAdrResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetStammAdrAsync(string UserName, string WebFirma, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStammdaten", ReplyAction="http://tempuri.org/IService/GetStammdatenResponse")]
        string GetStammdaten(string UserName, string WebFirma, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStammdaten", ReplyAction="http://tempuri.org/IService/GetStammdatenResponse")]
        System.Threading.Tasks.Task<string> GetStammdatenAsync(string UserName, string WebFirma, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWebFirma", ReplyAction="http://tempuri.org/IService/GetWebFirmaResponse")]
        string GetWebFirma(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWebFirma", ReplyAction="http://tempuri.org/IService/GetWebFirmaResponse")]
        System.Threading.Tasks.Task<string> GetWebFirmaAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UbergabePolter", ReplyAction="http://tempuri.org/IService/UbergabePolterResponse")]
        string UbergabePolter(string UserName, string WebFirma, string Password, string DsUpload);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/UbergabePolter", ReplyAction="http://tempuri.org/IService/UbergabePolterResponse")]
        System.Threading.Tasks.Task<string> UbergabePolterAsync(string UserName, string WebFirma, string Password, string DsUpload);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWfpNetCommTransport", ReplyAction="http://tempuri.org/IService/GetWfpNetCommTransportResponse")]
        string GetWfpNetCommTransport(string UserName, string WebFirma, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetWfpNetCommTransport", ReplyAction="http://tempuri.org/IService/GetWfpNetCommTransportResponse")]
        System.Threading.Tasks.Task<string> GetWfpNetCommTransportAsync(string UserName, string WebFirma, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckProjectVersion", ReplyAction="http://tempuri.org/IService/CheckProjectVersionResponse")]
        ConsoleApplication1.WfpNetService.CheckProjectVersionResponse CheckProjectVersion(ConsoleApplication1.WfpNetService.CheckProjectVersionRequest request);
        
        // CODEGEN: Der Nachrichtenvertrag wird generiert, da der Vorgang mehrere Rückgabewerte aufweist.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckProjectVersion", ReplyAction="http://tempuri.org/IService/CheckProjectVersionResponse")]
        System.Threading.Tasks.Task<ConsoleApplication1.WfpNetService.CheckProjectVersionResponse> CheckProjectVersionAsync(ConsoleApplication1.WfpNetService.CheckProjectVersionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ProjectUpgrade", ReplyAction="http://tempuri.org/IService/ProjectUpgradeResponse")]
        byte[] ProjectUpgrade(string Application, string UpgVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ProjectUpgrade", ReplyAction="http://tempuri.org/IService/ProjectUpgradeResponse")]
        System.Threading.Tasks.Task<byte[]> ProjectUpgradeAsync(string Application, string UpgVersion);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckProjectVersion", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckProjectVersionRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Application;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Version;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string NewVersion;
        
        public CheckProjectVersionRequest() {
        }
        
        public CheckProjectVersionRequest(string Application, string Version, string NewVersion) {
            this.Application = Application;
            this.Version = Version;
            this.NewVersion = NewVersion;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckProjectVersionResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckProjectVersionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string CheckProjectVersionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string NewVersion;
        
        public CheckProjectVersionResponse() {
        }
        
        public CheckProjectVersionResponse(string CheckProjectVersionResult, string NewVersion) {
            this.CheckProjectVersionResult = CheckProjectVersionResult;
            this.NewVersion = NewVersion;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ConsoleApplication1.WfpNetService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ConsoleApplication1.WfpNetService.IService>, ConsoleApplication1.WfpNetService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public ConsoleApplication1.WfpNetService.CompositeType GetDataUsingDataContract(ConsoleApplication1.WfpNetService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication1.WfpNetService.CompositeType> GetDataUsingDataContractAsync(ConsoleApplication1.WfpNetService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public System.Data.DataSet SelectSQL(string strSQL, string strPassword) {
            return base.Channel.SelectSQL(strSQL, strPassword);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectSQLAsync(string strSQL, string strPassword) {
            return base.Channel.SelectSQLAsync(strSQL, strPassword);
        }
        
        public System.Data.DataSet Disp_Trans(System.Data.DataSet ds) {
            return base.Channel.Disp_Trans(ds);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Disp_TransAsync(System.Data.DataSet ds) {
            return base.Channel.Disp_TransAsync(ds);
        }
        
        public System.Data.DataSet GetNetLogistikDocuments(string UserName, string Password, string strIDs, string strType) {
            return base.Channel.GetNetLogistikDocuments(UserName, Password, strIDs, strType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetNetLogistikDocumentsAsync(string UserName, string Password, string strIDs, string strType) {
            return base.Channel.GetNetLogistikDocumentsAsync(UserName, Password, strIDs, strType);
        }
        
        public int CheckUser(string UserName, string Password) {
            return base.Channel.CheckUser(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<int> CheckUserAsync(string UserName, string Password) {
            return base.Channel.CheckUserAsync(UserName, Password);
        }
        
        public void test10() {
            base.Channel.test10();
        }
        
        public System.Threading.Tasks.Task test10Async() {
            return base.Channel.test10Async();
        }
        
        public void test11() {
            base.Channel.test11();
        }
        
        public System.Threading.Tasks.Task test11Async() {
            return base.Channel.test11Async();
        }
        
        public string GetDate() {
            return base.Channel.GetDate();
        }
        
        public System.Threading.Tasks.Task<string> GetDateAsync() {
            return base.Channel.GetDateAsync();
        }
        
        public System.Data.DataSet GetAuftrag(string UserName, string Password, string version, string Auftrag, string p1, string p2, string p3) {
            return base.Channel.GetAuftrag(UserName, Password, version, Auftrag, p1, p2, p3);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAuftragAsync(string UserName, string Password, string version, string Auftrag, string p1, string p2, string p3) {
            return base.Channel.GetAuftragAsync(UserName, Password, version, Auftrag, p1, p2, p3);
        }
        
        public System.Data.DataSet PutSW(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds) {
            return base.Channel.PutSW(UserName, Password, version, p1, p2, p3, ds);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> PutSWAsync(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds) {
            return base.Channel.PutSWAsync(UserName, Password, version, p1, p2, p3, ds);
        }
        
        public System.Data.DataSet Tabellen(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds) {
            return base.Channel.Tabellen(UserName, Password, version, p1, p2, p3, ds);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> TabellenAsync(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds) {
            return base.Channel.TabellenAsync(UserName, Password, version, p1, p2, p3, ds);
        }
        
        public System.Data.DataSet Transport(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds) {
            return base.Channel.Transport(UserName, Password, version, p1, p2, p3, ds);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> TransportAsync(string UserName, string Password, string version, string p1, string p2, string p3, System.Data.DataSet ds) {
            return base.Channel.TransportAsync(UserName, Password, version, p1, p2, p3, ds);
        }
        
        public System.Data.DataSet ListenPool(string UserName, string Password, string WebFirma, string Version, System.Data.DataSet ds) {
            return base.Channel.ListenPool(UserName, Password, WebFirma, Version, ds);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ListenPoolAsync(string UserName, string Password, string WebFirma, string Version, System.Data.DataSet ds) {
            return base.Channel.ListenPoolAsync(UserName, Password, WebFirma, Version, ds);
        }
        
        public System.Data.DataSet Poltererfassung(System.Data.DataSet dsService) {
            return base.Channel.Poltererfassung(dsService);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> PoltererfassungAsync(System.Data.DataSet dsService) {
            return base.Channel.PoltererfassungAsync(dsService);
        }
        
        public System.Data.DataSet CheckVersion(string Application) {
            return base.Channel.CheckVersion(Application);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> CheckVersionAsync(string Application) {
            return base.Channel.CheckVersionAsync(Application);
        }
        
        public string CreateFertigmeldung(string UserName, string WebFirma, string Password, string xmlFile) {
            return base.Channel.CreateFertigmeldung(UserName, WebFirma, Password, xmlFile);
        }
        
        public System.Threading.Tasks.Task<string> CreateFertigmeldungAsync(string UserName, string WebFirma, string Password, string xmlFile) {
            return base.Channel.CreateFertigmeldungAsync(UserName, WebFirma, Password, xmlFile);
        }
        
        public string RemovePolterFromFertigmeldung(string UserName, string WebFirma, string Password, string arrPIDs) {
            return base.Channel.RemovePolterFromFertigmeldung(UserName, WebFirma, Password, arrPIDs);
        }
        
        public System.Threading.Tasks.Task<string> RemovePolterFromFertigmeldungAsync(string UserName, string WebFirma, string Password, string arrPIDs) {
            return base.Channel.RemovePolterFromFertigmeldungAsync(UserName, WebFirma, Password, arrPIDs);
        }
        
        public string DeletePolters(string UserName, string WebFirma, string Password, string arrPIDs) {
            return base.Channel.DeletePolters(UserName, WebFirma, Password, arrPIDs);
        }
        
        public System.Threading.Tasks.Task<string> DeletePoltersAsync(string UserName, string WebFirma, string Password, string arrPIDs) {
            return base.Channel.DeletePoltersAsync(UserName, WebFirma, Password, arrPIDs);
        }
        
        public System.Data.DataSet SWNet(string UserName, string Password, string version, string WebFirma, System.Data.DataSet ds) {
            return base.Channel.SWNet(UserName, Password, version, WebFirma, ds);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SWNetAsync(string UserName, string Password, string version, string WebFirma, System.Data.DataSet ds) {
            return base.Channel.SWNetAsync(UserName, Password, version, WebFirma, ds);
        }
        
        public System.Data.DataSet WfpNetTransport(string UserName, string Password, System.Data.DataSet dsImport) {
            return base.Channel.WfpNetTransport(UserName, Password, dsImport);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> WfpNetTransportAsync(string UserName, string Password, System.Data.DataSet dsImport) {
            return base.Channel.WfpNetTransportAsync(UserName, Password, dsImport);
        }
        
        public System.Data.DataSet WASP_Poltererfassung(string ds_String) {
            return base.Channel.WASP_Poltererfassung(ds_String);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> WASP_PoltererfassungAsync(string ds_String) {
            return base.Channel.WASP_PoltererfassungAsync(ds_String);
        }
        
        public string GetPolterFromNetlogistik(string GUID) {
            return base.Channel.GetPolterFromNetlogistik(GUID);
        }
        
        public System.Threading.Tasks.Task<string> GetPolterFromNetlogistikAsync(string GUID) {
            return base.Channel.GetPolterFromNetlogistikAsync(GUID);
        }
        
        public string GetFertigmeldung(string UserName, string WebFirma, string Password, int Tage, string Filter_LiName, string DsUpload) {
            return base.Channel.GetFertigmeldung(UserName, WebFirma, Password, Tage, Filter_LiName, DsUpload);
        }
        
        public System.Threading.Tasks.Task<string> GetFertigmeldungAsync(string UserName, string WebFirma, string Password, int Tage, string Filter_LiName, string DsUpload) {
            return base.Channel.GetFertigmeldungAsync(UserName, WebFirma, Password, Tage, Filter_LiName, DsUpload);
        }
        
        public System.Data.DataSet GetStammAdr(string UserName, string WebFirma, string Password) {
            return base.Channel.GetStammAdr(UserName, WebFirma, Password);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetStammAdrAsync(string UserName, string WebFirma, string Password) {
            return base.Channel.GetStammAdrAsync(UserName, WebFirma, Password);
        }
        
        public string GetStammdaten(string UserName, string WebFirma, string Password) {
            return base.Channel.GetStammdaten(UserName, WebFirma, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetStammdatenAsync(string UserName, string WebFirma, string Password) {
            return base.Channel.GetStammdatenAsync(UserName, WebFirma, Password);
        }
        
        public string GetWebFirma(string UserName, string Password) {
            return base.Channel.GetWebFirma(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetWebFirmaAsync(string UserName, string Password) {
            return base.Channel.GetWebFirmaAsync(UserName, Password);
        }
        
        public string UbergabePolter(string UserName, string WebFirma, string Password, string DsUpload) {
            return base.Channel.UbergabePolter(UserName, WebFirma, Password, DsUpload);
        }
        
        public System.Threading.Tasks.Task<string> UbergabePolterAsync(string UserName, string WebFirma, string Password, string DsUpload) {
            return base.Channel.UbergabePolterAsync(UserName, WebFirma, Password, DsUpload);
        }
        
        public string GetWfpNetCommTransport(string UserName, string WebFirma, string Password) {
            return base.Channel.GetWfpNetCommTransport(UserName, WebFirma, Password);
        }
        
        public System.Threading.Tasks.Task<string> GetWfpNetCommTransportAsync(string UserName, string WebFirma, string Password) {
            return base.Channel.GetWfpNetCommTransportAsync(UserName, WebFirma, Password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ConsoleApplication1.WfpNetService.CheckProjectVersionResponse ConsoleApplication1.WfpNetService.IService.CheckProjectVersion(ConsoleApplication1.WfpNetService.CheckProjectVersionRequest request) {
            return base.Channel.CheckProjectVersion(request);
        }
        
        public string CheckProjectVersion(string Application, string Version, ref string NewVersion) {
            ConsoleApplication1.WfpNetService.CheckProjectVersionRequest inValue = new ConsoleApplication1.WfpNetService.CheckProjectVersionRequest();
            inValue.Application = Application;
            inValue.Version = Version;
            inValue.NewVersion = NewVersion;
            ConsoleApplication1.WfpNetService.CheckProjectVersionResponse retVal = ((ConsoleApplication1.WfpNetService.IService)(this)).CheckProjectVersion(inValue);
            NewVersion = retVal.NewVersion;
            return retVal.CheckProjectVersionResult;
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication1.WfpNetService.CheckProjectVersionResponse> CheckProjectVersionAsync(ConsoleApplication1.WfpNetService.CheckProjectVersionRequest request) {
            return base.Channel.CheckProjectVersionAsync(request);
        }
        
        public byte[] ProjectUpgrade(string Application, string UpgVersion) {
            return base.Channel.ProjectUpgrade(Application, UpgVersion);
        }
        
        public System.Threading.Tasks.Task<byte[]> ProjectUpgradeAsync(string Application, string UpgVersion) {
            return base.Channel.ProjectUpgradeAsync(Application, UpgVersion);
        }
    }
}
